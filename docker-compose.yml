version: "3"

services:
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
  #   environment:
  #     - discovery.type=single-node
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    # command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data
    networks:
      - cache
  db-customer:
    image: postgres
    ports:
      - "5434:5432"
    restart: always
    volumes:
      - db-customer-data:/var/lib/postgresql/data
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql # This will run the init.sql script on the first run
    networks:
      - db-customer
    environment:
      - POSTGRES_DB=customer
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    # expose:
    #   - 5432 # Expose this port internally for docker containers on the same network
  db-product:
    image: postgres
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - db-product-data:/var/lib/postgresql/data # Persist the data
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql # This will run the init.sql script on the first run
    networks:
      - db-product
    environment:
      - POSTGRES_DB=product
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  # externalDTOs-service:
  #   build:
  #     context: ./externalDTOs
  #   container_name: externalDTOs
  #   volumes:
  #     - maven-repo:/root/.m2
  #   ports:
  #     - "8081:8080"

  config-server:
    build:
      context: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    depends_on:
      - cache
      - kafka
      - cassandra
    networks:
      - services
    healthcheck:
      test: 'curl --fail --silent localhost:8080/actuator/health | jq --exit-status -n ''inputs | if has("status") then .status=="UP" else false end'' > /dev/null || exit 1'
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 15s

  discovery-service:
    build:
      context: ./discovery
    container_name: discovery-service
    ports:
      - "8761:8761"
    depends_on:
      - config-server
    # condition: service_healthy
    networks:
      - services
    healthcheck:
      test: 'curl --fail --silent localhost:8080/actuator/health | jq --exit-status -n ''inputs | if has("status") then .status=="UP" else false end'' > /dev/null || exit 1'
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 15s

  gateway-service:
    build:
      context: ./gateway
    container_name: gateway-service
    ports:
      - "8222:8222"
    depends_on:
      - discovery-service
        # condition: service_healthy
    networks:
      - services

  customer-service:
    build:
      context: ./customer-service
    container_name: customer-service
    ports:
      - "8090:8090"
    depends_on:
      - gateway-service
        # condition: service_healthy
      - db-customer
      - logstash

    # environment:
    #   # - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
    #   - LOGSTASH_HOST=logstash
    #   - LOGSTASH_PORT=5044

    networks:
      - services
      - elastic
      - prometheus

  session-service:
    build:
      context: ./session-service
    container_name: session-service
    ports:
      - "8030:8030"
    depends_on:
      - gateway-service
        # condition: service_healthy
      - cassandra
    networks:
      - services
      - elastic
      - prometheus

  # product-service:
  #   build:
  #     context: ./product-service
  #   container_name: product-service
  #   ports:
  #     - "8070:8070"
  #   depends_on:
  #     - gateway-service
  #       # condition: service_healthy
  #     - db-product
  #     - redis
  #     - cassandra
  #   networks:
  #     - services
  #     - elastic
  #     - prometheus

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper

  cassandra:
    image: cassandra:latest
    container_name: cassandra-container
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_USER: "admin"
      CASSANDRA_PASSWORD: "admin"
    volumes:
      - cassandra-data:/var/lib/cassandra
      - ./scripts/cassandra_init.sh:/init.sh
    # entrypoint: ["/app-entrypoint.sh"]
    # command: ["/init.sh"]
  elasticsearch:
    image: elasticsearch:7.16.1
    container_name: es
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - elastic
  logstash:
    image: logstash:7.16.1
    container_name: log
    environment:
      discovery.seed_hosts: logstash
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - ./elasticsearch-logstash-kibana/logstash/pipeline/logstash-nginx.config:/usr/share/logstash/pipeline/logstash-nginx.config
      - ./elasticsearch-logstash-kibana/logstash/nginx.log:/home/nginx.log
    ports:
      # - "5001:5001/tcp"
      # - "5001:5001/udp"
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - elastic
    command: logstash -f /usr/share/logstash/pipeline/logstash-nginx.config
  kibana:
    image: kibana:7.16.1
    container_name: kib
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elastic
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    restart: unless-stopped
    networks:
      - prometheus
    volumes:
      - ./prometheus-grafana/prometheus:/etc/prometheus
      - prom_data:/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    networks:
      - prometheus
    volumes:
      - ./prometheus-grafana/grafana:/etc/grafana/provisioning/datasources

volumes:
  cassandra-data:
  cache:
    driver: local
  db-product-data:
    driver: local
  db-customer-data:
    driver: local
  prom_data:

networks:
  db-product:
  db-customer:
  cache:
  services:
  elastic:
    driver: bridge
  prometheus:
    driver: bridge
