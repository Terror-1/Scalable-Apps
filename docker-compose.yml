version: "3"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    # command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data
    networks:
      - cache
  db-customer:
    image: postgres
    ports:
      - "5434:5432"
    restart: always
    volumes:
      - db-customer-data:/var/lib/postgresql/data
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql # This will run the init.sql script on the first run
    networks:
      - db-customer
    environment:
      - POSTGRES_DB=customer
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    # expose:
    #   - 5432 # Expose this port internally for docker containers on the same network
  db-product:
    image: postgres
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - db-product-data:/var/lib/postgresql/data # Persist the data
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql # This will run the init.sql script on the first run
    networks:
      - db-product
    environment:
      - POSTGRES_DB=product
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres


#  config-server:
#    build:
#      context: ./config-server
#    container_name: config-server
#    ports:
#      - "8888:8888"
#    depends_on:
#      - cache
#      - kafka
#      - cassandra
#    networks:
#      - services
#
#
#  discovery-service:
#    build:
#      context: ./discovery
#    container_name: discovery-service
#    ports:
#      - "8761:8761"
#    depends_on:
#      - config-server
#    networks:
#      - services
#
#
#  gateway-service:
#    build:
#      context: ./gateway
#    container_name: gateway-service
#
#    ports:
#      - "8222:8222"
#    depends_on:
#      - discovery-service
#      - config-server
#    networks:
#      - services
#
#  customer-service:
#    build:
#      context: ./customer-service
#    container_name: customer-service
#    ports:
#      - "8090:8090"
#    depends_on:
#      - discovery-service
#      - db-customer
#    networks:
#      - services
  #
  #  session-service:
  #    build:
  #      context: ./session-service
  #    container_name: session-service
  #    ports:
  #      - "8030:8030"
  #    depends_on:
  #      - customer-service
  #    networks:
  #      - services
  #
  #  product-service:
  #    build:
  #      context: ./product-service
  #    container_name: product-service
  #    ports:
  #      - "8070:8070"
  #    depends_on:
  #      - session-service
  #      - db-product
  #    networks:
  #      - services

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper

  cassandra:
    image: cassandra:latest
    container_name: cassandra-container
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_USER: "admin"
      CASSANDRA_PASSWORD: "admin"
    volumes:
      - cassandra-data:/var/lib/cassandra
      - ./scripts/cassandra_init.sh:/init.sh
    # entrypoint: ["/app-entrypoint.sh"]
    # command: ["/init.sh"]

volumes:
  cassandra-data:
  cache:
    driver: local
  db-product-data:
    driver: local
  db-customer-data:
    driver: local

networks:
  db-product:
  db-customer:
  cache:
  services: